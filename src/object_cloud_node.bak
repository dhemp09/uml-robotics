#include <ros/ros.h>
#include <iostream>
#include <vector>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/search/search.h>
#include <pcl/search/kdtree.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/filters/passthrough.h>
#include <pcl/segmentation/region_growing.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/PCLPointCloud2.h>
#include <pcl/conversions.h>
#include <pcl_ros/transforms.h>
#include <pcl_ros/impl/transforms.hpp>	
#include <tf/transform_listener.h>
#include <tf2_ros/transform_listener.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <cob_perception_msgs/DetectionArray.h>
#include <cob_perception_msgs/Detection.h>
#include <cob_perception_msgs/Rect.h>
#include <cob_perception_msgs/Mask.h>
#include <pcl/features/normal_3d.h>
#include <pcl/segmentation/region_growing_rgb.h>

using namespace std;

ros::Publisher pub;

typedef pcl::PointCloud<pcl::PointXYZRGB> pclCloud;

pclCloud cloud;

void pcl_cb(const pclCloud::ConstPtr& input){

	//Planar segmentation
  	pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);
  	pcl::PointIndices::Ptr inliers (new pcl::PointIndices);
  	pcl::SACSegmentation<pcl::PointXYZRGB> seg;
 	seg.setOptimizeCoefficients (true);
  	seg.setModelType (pcl::SACMODEL_PLANE);
  	seg.setMethodType (pcl::SAC_RANSAC);
  	seg.setDistanceThreshold (0.01);
  	seg.setInputCloud (input);
  	seg.segment (*inliers, *coefficients);
  	if (inliers->indices.size () == 0){
    	PCL_ERROR ("Could not estimate a planar model for the given dataset.");
  	}

    	pcl::IndicesPtr indices (new vector <int>);
    	pcl::PassThrough<pcl::PointXYZRGB> pass;
    	pass.setInputCloud (input);
    	pass.setFilterFieldName ("z");
    	pass.setFilterLimits (0.0, 1.5);
    	pass.filter (*indices);

    	vector<bool> boolIndices(input->points.size());
    	for (int i = 0; i < indices->size(); i++)
       		boolIndices[(*indices)[i]] = true;
    	for (int i = 0; i < inliers->indices.size(); i++)
       		boolIndices[inliers->indices[i]] = false;
    	pcl::IndicesPtr segmentedIndices(new vector<int>);
    	for (int i = 0; i < boolIndices.size(); i++)
       		if (boolIndices[i])
           		segmentedIndices->push_back(i);

	//Region growing segmentation
	//pcl::search::Search<pcl::PointXYZRGB>::Ptr tree = 
	//boost::shared_ptr<pcl::search::Search<pcl::PointXYZRGB> > 
	//(new pcl::search::KdTree<pcl::PointXYZRGB>);
  	//pcl::PointCloud <pcl::Normal>::Ptr normals (new pcl::PointCloud <pcl::Normal>);
  	//pcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> normal_estimator;
  	//normal_estimator.setSearchMethod (tree);
  	//normal_estimator.setInputCloud (input);
  	//normal_estimator.setKSearch (50);
  	//normal_estimator.compute (*normals);
  	//pcl::PassThrough<pcl::PointXYZRGB> pass2;
  	//pass2.setInputCloud (input);
  	//pass2.setFilterFieldName ("z");
  	//pass2.setFilterLimits (0.0, 1.0);
  	//pass2.filter (*segmentedIndices);

  	//pcl::RegionGrowing<pcl::PointXYZRGB, pcl::Normal> reg;
  	//reg.setMinClusterSize (50);
  	//reg.setMaxClusterSize (1000000);
  	//reg.setSearchMethod (tree);
  	//reg.setNumberOfNeighbours (30);
  	//reg.setInputCloud (input);
  	//reg.setInputNormals (normals);
  	//reg.setSmoothnessThreshold (3.0 / 180.0 * M_PI);
  	//reg.setCurvatureThreshold (1.0);

  	//std::vector <pcl::PointIndices> clusters;
  	//reg.extract (clusters);

  	//pclCloud::Ptr colored_cloud = reg.getColoredCloud ();
	
	//Region growing RGB segmentation
	pcl::search::Search <pcl::PointXYZRGB>::Ptr tree = 
	boost::shared_ptr<pcl::search::Search<pcl::PointXYZRGB> > 
	(new pcl::search::KdTree<pcl::PointXYZRGB>);
    	pcl::RegionGrowingRGB<pcl::PointXYZRGB> reg;
    	reg.setInputCloud (input);
    	reg.setIndices (segmentedIndices);
    	reg.setSearchMethod (tree);
    	reg.setDistanceThreshold (10);
    	reg.setPointColorThreshold (75);
    	reg.setRegionColorThreshold (5);
    	reg.setMinClusterSize (400);

    	vector <pcl::PointIndices> clusters;
    	reg.extract (clusters);
    	pclCloud::Ptr colored_cloud = reg.getColoredCloud ();
	cloud = *colored_cloud;
}

void detections_cb(const cob_perception_msgs::DetectionArray::ConstPtr& input){

	pclCloud output;
	output.header.frame_id = input->header.frame_id;

	for(int i = 0; i < input->detections.size(); i++){
		cob_perception_msgs::Rect roi = input->detections[i].mask.roi;
       		set<uint> colorSet;
       		vector<uint> colorVec;
       		const uint filteredOutColor = 16711680;
       		for (int x = roi.x; x < roi.x + roi.width; x++)
           		for (int y = roi.y; y < roi.y + roi.height; y++)
               			if (cloud.at(x, y).rgba != filteredOutColor) {
                   			colorSet.insert(cloud.at(x, y).rgba);
                   			colorVec.push_back(cloud.at(x, y).rgba);
               			}
       		uint mostCommonColor;
       		int mostOccurrences = 0;
       		for (set<uint>::iterator it = colorSet.begin(); it != colorSet.end(); it++) {
           		int c = count(colorVec.begin(), colorVec.end(), *it);
           		if (c > mostOccurrences) {
               			mostOccurrences = c;
               			mostCommonColor = *it;
           		}
       		}
       		for (int xPos = roi.x; xPos < roi.x + roi.width; xPos++)
           		for (int yPos = roi.y; yPos < roi.y + roi.height; yPos++)
               			if (mostCommonColor == cloud.at(xPos, yPos).rgba)
                   			output.push_back(cloud.at(xPos, yPos));
	}  
   	pub.publish(output);
}



int main (int argc, char** argv){
  ros::init(argc, argv, "object_cloud");
  ros::NodeHandle n;
  ros::Subscriber detection_sub = n.subscribe("/object_detection/detections", 1, detections_cb);
  ros::Subscriber pcl_sub = n.subscribe("/camera/depth_registered/points", 1, pcl_cb);
  pub = n.advertise<sensor_msgs::PointCloud2>("/object_cloud", 1);
  ros::spin();

  return (0);
}
